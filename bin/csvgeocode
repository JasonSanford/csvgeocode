#!/usr/bin/env node

var path = require("path"),
    yargs = require("yargs")
    .usage("Usage: geocode [options] [input CSV] [output CSV]")
    .describe("lat","Latitude column name. Default: automatic detection")
    .describe("lng","Longitude column name. Default: automatic detection")
    .describe("address","Address column name. Default: automatic detection")
    .describe("url","URL template for geocoding API with {{a}} as the address placeholder. Default: https://maps.googleapis.com/maps/api/geocode/json?address={{a}}")
    .describe("delay","Milliseconds to wait between API calls. Default: 250")
    .describe("force","Re-geocode every row even if a lat/lng already exists")
    .describe("verbose","Show some information while csvgeocode is running")
    .describe("help","Show this message")
    .boolean(["force","verbose","help"])
    .string(["_","lat","lng","address","url"])
    .check(function(argv) {

      if (argv.help) return;
      if ("delay" in argv && isNaN(Number(argv.delay))) {
        throw new Error("--delay requires a numeric value in milliseconds.");
      }

      return true;

    }),
    args = yargs.argv,
    geocode = require("../"),
    options = require("../src/defaults"),
    geocoder;

if (args.help || !args._ || !args._.length) {
  return yargs.showHelp();
}

for (var key in options) {
  if (key in args) {
    options[key] = args[key];
  }
}

//They specified an output file
if (args._.length > 1) {

  geocoder = geocode(args._[0],args._[1],options);

//No output file, use stdout
} else {
  geocoder = geocode(args._[0],options);
}

if (args.verbose) {

  geocoder.on("row",function(err,row){
      var address = "";
      if (row[geocoder.options.address]) {
        address = row[geocoder.options.address]+": ";
      }
      console.warn(address+(err || "SUCCESS"));
    })
    .on("complete",function(summary){
      console.warn("\nRows geocoded: "+summary.successes+"\n"+
                  "Rows failed: "+summary.failures+"\n"+
                  "Time elapsed: "+(Math.round(summary.time/100)/10)+" seconds");
    });

}